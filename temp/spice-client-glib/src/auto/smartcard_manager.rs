// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "SpiceSmartcardManager")]
    pub struct SmartcardManager(Object<ffi::SpiceSmartcardManager, ffi::SpiceSmartcardManagerClass>);

    match fn {
        type_ => || ffi::spice_smartcard_manager_get_type(),
    }
}

impl SmartcardManager {
    pub const NONE: Option<&'static SmartcardManager> = None;

    #[doc(alias = "spice_smartcard_manager_get")]
    pub fn get() -> Option<SmartcardManager> {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::spice_smartcard_manager_get()) }
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::SmartcardManager>> Sealed for T {}
}

pub trait SmartcardManagerExt: IsA<SmartcardManager> + sealed::Sealed + 'static {
    //#[doc(alias = "spice_smartcard_manager_get_readers")]
    //#[doc(alias = "get_readers")]
    //fn readers(&self) -> /*Ignored*/Vec<SmartcardReader> {
    //    unsafe { TODO: call ffi:spice_smartcard_manager_get_readers() }
    //}

    #[doc(alias = "spice_smartcard_manager_insert_card")]
    fn insert_card(&self) -> bool {
        unsafe {
            from_glib(ffi::spice_smartcard_manager_insert_card(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "spice_smartcard_manager_remove_card")]
    fn remove_card(&self) -> bool {
        unsafe {
            from_glib(ffi::spice_smartcard_manager_remove_card(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<SmartcardManager>> SmartcardManagerExt for O {}

impl fmt::Display for SmartcardManager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SmartcardManager")
    }
}
